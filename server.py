 # server.py (expanded with pest_alerts + fertilizer_advice endpoints)
from fastapi import FastAPI
from pydantic import BaseModel
import random
import datetime

# Import voice modules
# Update these imports to match your actual directory structure or comment them out if the modules do not exist.
# For example, if 'tts.py' and 'SpeechRecognition.py' are in the same directory as server.py, use:
# from tts import router as tts_router
# from SpeechRecognition import router as stt_router

# Include voice module routers if available
# app.include_router(tts_router)
# app.include_router(stt_router)
app = FastAPI(title="üåæ Smart Farming Assistant / ‡¥∏‡µç‡¥Æ‡¥æ‡µº‡¥ü‡µç‡¥ü‡µç ‡¥´‡¥æ‡µº‡¥Æ‡¥ø‡¥Ç‡¥ó‡µç ‡¥Ö‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥®‡µç‡¥±‡µç")

# Include voice module routers
app.include_router(tts_router)
app.include_router(stt_router)

# ---------------- CROPS DATASET ----------------
crops_data = {
    "loamy": ["Rice / ‡¥Ö‡¥∞‡¥ø", "Banana / ‡¥µ‡¥æ‡¥¥‡¥™‡µç‡¥™‡¥¥‡¥Ç", "Coconut / ‡¥§‡µá‡¥ô‡µç‡¥ô", "Maize / ‡¥ö‡µã‡¥≥‡¥Ç", "Vegetables / ‡¥™‡¥ö‡µç‡¥ö‡¥ï‡µç‡¥ï‡¥±‡¥ø‡¥ï‡µæ", "Papaya / ‡¥ï‡¥™‡µç‡¥™‡¥≤‡¥£‡µç‡¥ü‡¥ø", "Turmeric / ‡¥Æ‡¥û‡µç‡¥û‡µæ", "Ginger / ‡¥á‡¥û‡µç‡¥ö‡¥ø"],
    "clayey": ["Paddy / ‡¥®‡µÜ‡¥≤‡µç‡¥≤‡µç", "Sugarcane / ‡¥ï‡¥∞‡¥ø‡¥Æ‡µç‡¥™‡µç", "Wheat / ‡¥ó‡µã‡¥§‡¥Æ‡µç‡¥™‡µç", "Cotton / ‡¥™‡¥∞‡µÅ‡¥§‡µç‡¥§‡¥ø", "Jute / ‡¥ö‡¥£", "Gram / ‡¥ï‡¥ü‡¥≤", "Mustard / ‡¥ï‡¥ü‡µÅ‡¥ï‡µç", "Sesame / ‡¥é‡¥≥‡µç‡¥≥‡µç"],
    "sandy": ["Groundnut / ‡¥®‡¥ø‡¥≤‡¥ï‡µç‡¥ï‡¥ü‡¥≤", "Pineapple / ‡¥ï‡¥æ‡¥Ø‡¥™‡µç‡¥™‡¥¥‡¥Ç", "Watermelon / ‡¥§‡¥£‡µç‡¥£‡¥ø‡¥Æ‡¥§‡µç‡¥§‡µª", "Millets / ‡¥ï‡µÅ‡¥§‡¥ø‡¥∞‡¥µ‡¥≥‡µç‡¥≥‡¥ø", "Potato / ‡¥â‡¥∞‡µÅ‡¥≥‡¥ï‡µç‡¥ï‡¥ø‡¥¥‡¥ô‡µç‡¥ô‡µç", "Sunflower / ‡¥∏‡µÇ‡µº‡¥Ø‡¥ï‡¥æ‡¥®‡µç‡¥§‡¥ø"],
    "laterite": ["Rubber / ‡¥±‡¥¨‡µç‡¥¨‡µº", "Pepper / ‡¥ï‡µÅ‡¥∞‡µÅ‡¥Æ‡µÅ‡¥≥‡¥ï‡µç", "Tea / ‡¥ö‡¥æ‡¥Ø", "Coffee / ‡¥ï‡¥æ‡¥™‡µç‡¥™‡¥ø", "Cashew / ‡¥ï‡¥∂‡µÅ‡¥µ‡¥£‡µç‡¥ü‡¥ø", "Arecanut / ‡¥Ö‡¥ü‡¥Ø‡µç‡¥ï‡µç‡¥ï", "Vanilla / ‡¥µ‡¥®‡¥ø‡¥≤"],
    "black": ["Cotton / ‡¥™‡¥∞‡µÅ‡¥§‡µç‡¥§‡¥ø", "Soybean / ‡¥∏‡µã‡¥Ø‡¥æ‡¥¨‡µÄ‡µª", "Sorghum / ‡¥ö‡µã‡¥≥‡¥Ç", "Sunflower / ‡¥∏‡µÇ‡µº‡¥Ø‡¥ï‡¥æ‡¥®‡µç‡¥§‡¥ø", "Tur / ‡¥§‡µÅ‡¥µ‡¥∞‡¥™‡µç‡¥™‡¥∞‡¥ø‡¥™‡µç‡¥™‡µç", "Castor / ‡¥Ö‡¥µ‡¥®‡¥ï‡µç‡¥ï‡µÅ"],
    "red": ["Groundnut / ‡¥®‡¥ø‡¥≤‡¥ï‡µç‡¥ï‡¥ü‡¥≤", "Millets / ‡¥ï‡µÅ‡¥§‡¥ø‡¥∞‡¥µ‡¥≥‡µç‡¥≥‡¥ø", "Tobacco / ‡¥™‡µÅ‡¥ï‡¥Ø‡¥ø‡¥≤", "Onion / ‡¥â‡¥≥‡µç‡¥≥‡¥ø", "Tomato / ‡¥§‡¥ï‡µç‡¥ï‡¥æ‡¥≥‡¥ø", "Chillies / ‡¥Æ‡µÅ‡¥≥‡¥ï‡µç"],
    "alluvial": ["Rice / ‡¥Ö‡¥∞‡¥ø", "Wheat / ‡¥ó‡µã‡¥§‡¥Æ‡µç‡¥™‡µç", "Sugarcane / ‡¥ï‡¥∞‡¥ø‡¥Æ‡µç‡¥™‡µç", "Pulses / ‡¥™‡¥∞‡¥ø‡¥™‡µç‡¥™‡µç", "Oilseeds / ‡¥é‡¥£‡µç‡¥£ ‡¥µ‡¥ø‡¥§‡µç‡¥§‡µÅ‡¥ï‡µæ", "Potato / ‡¥â‡¥∞‡µÅ‡¥≥‡¥ï‡µç‡¥ï‡¥ø‡¥¥‡¥ô‡µç‡¥ô‡µç", "Jute / ‡¥ö‡¥£"],
    "desert": ["Barley / ‡¥µ‡¥≤‡µç‡¥≤‡¥∞‡¥ø", "Millets / ‡¥ï‡µÅ‡¥§‡¥ø‡¥∞‡¥µ‡¥≥‡µç‡¥≥‡¥ø", "Cumin / ‡¥ú‡µÄ‡¥∞‡¥ï‡¥Ç", "Mustard / ‡¥ï‡¥ü‡µÅ‡¥ï‡µç", "Guar / ‡¥ó‡µç‡¥µ‡¥æ‡µº"],
    "mountain": ["Apple / ‡¥Ü‡¥™‡µç‡¥™‡¥ø‡µæ", "Tea / ‡¥ö‡¥æ‡¥Ø", "Barley / ‡¥µ‡¥≤‡µç‡¥≤‡¥∞‡¥ø", "Maize / ‡¥ö‡µã‡¥≥‡¥Ç", "Saffron / ‡¥ï‡µÅ‡¥ô‡µç‡¥ï‡µÅ‡¥Æ‡¥™‡µç‡¥™‡µÇ‡¥µ‡µç", "Cardamom / ‡¥è‡¥≤‡¥Ç"]
}

# ---------------- DISEASE DATASET ----------------
disease_data = {
    "leaf_blight": "Spray copper fungicide; remove affected leaves. / ‡¥ö‡µÜ‡¥Æ‡µç‡¥™‡µç ‡¥´‡¥Ç‡¥ó‡¥ø‡¥∏‡µà‡¥°‡µç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç; ‡¥¨‡¥æ‡¥ß‡¥ø‡¥ö‡µç‡¥ö ‡¥á‡¥≤‡¥ï‡µæ ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥£‡¥Ç.",
    "powdery_mildew": "Apply sulfur dust or neem oil weekly. / ‡¥∏‡µæ‡¥´‡µº ‡¥™‡µä‡¥ü‡¥ø ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥µ‡µá‡¥™‡µç‡¥™‡µÜ‡¥£‡µç‡¥£ ‡¥Ü‡¥¥‡µç‡¥ö‡¥§‡µã‡¥±‡µÅ‡¥Ç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "root_rot": "Improve drainage; fungicide drench required. / ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥®‡¥ø‡µΩ‡¥ï‡µç‡¥ï‡¥æ‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥∂‡µç‡¥∞‡¥¶‡µç‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï; ‡¥´‡¥Ç‡¥ó‡¥ø‡¥∏‡µà‡¥°‡µç ‡¥í‡¥¥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "bacterial_spot": "Use copper hydroxide spray; prune infected parts. / ‡¥ö‡µÜ‡¥Æ‡µç‡¥™‡µç ‡¥π‡µà‡¥°‡µç‡¥∞‡µã‡¥ï‡µç‡¥∏‡µà‡¥°‡µç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï; ‡¥¨‡¥æ‡¥ß‡¥ø‡¥ö‡µç‡¥ö ‡¥≠‡¥æ‡¥ó‡¥ô‡µç‡¥ô‡µæ ‡¥Æ‡µÅ‡¥±‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "rust": "Plant resistant varieties; spray triazole fungicides. / ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥∞‡µã‡¥ß ‡¥á‡¥®‡¥ô‡µç‡¥ô‡µæ ‡¥®‡¥ü‡µç‡¥ü‡µç ‡¥ü‡µç‡¥∞‡¥Ø‡¥æ‡¥∏‡µã‡µæ ‡¥´‡¥Ç‡¥ó‡¥ø‡¥∏‡µà‡¥°‡µç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "yellow_leaf_curl": "Control whiteflies with neem oil or insecticides. / ‡¥µ‡µá‡¥™‡µç‡¥™‡µÜ‡¥£‡µç‡¥£‡¥Ø‡µã ‡¥ï‡µÄ‡¥ü‡¥®‡¥æ‡¥∂‡¥ø‡¥®‡¥ø‡¥Ø‡µã ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥µ‡µÜ‡¥≥‡µÅ‡¥§‡µç‡¥§‡¥™‡µç‡¥™‡¥±‡µç‡¥± ‡¥®‡¥ø‡¥Ø‡¥®‡µç‡¥§‡µç‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "blast": "Use resistant seeds; carbendazim spray at 10-day intervals. / ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥∞‡µã‡¥ß ‡¥∂‡µá‡¥∑‡¥ø‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥µ‡¥ø‡¥§‡µç‡¥§‡µÅ‡¥ï‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï; 10 ‡¥¶‡¥ø‡¥µ‡¥∏‡¥§‡µç‡¥§‡¥ø‡¥≤‡µä‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µΩ ‡¥ï‡¥æ‡µº‡¥¨‡µÜ‡µª‡¥°‡¥æ‡¥∏‡¥ø‡¥Ç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "tikka_disease": "Spray chlorothalonil or mancozeb for 2‚Äì3 weeks. / 2‚Äì3 ‡¥Ü‡¥¥‡µç‡¥ö‡¥ï‡µæ‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‡¥ï‡µç‡¥≤‡µã‡¥∞‡µã‡¥§‡µç‡¥§‡¥≤‡µã‡¥£‡¥ø‡µΩ ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥Æ‡¥æ‡¥ô‡µç‡¥ï‡µã‡¥∏‡µÜ‡¥¨‡µç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "wilt": "Rotate crops; soil solarization; fungicide treatment. / ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ ‡¥Æ‡¥æ‡¥±‡¥ø ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï; ‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥∏‡µÇ‡¥∞‡µç‡¥Ø‡¥™‡µç‡¥∞‡¥ï‡¥æ‡¥∂‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥µ‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥ï; ‡¥´‡¥Ç‡¥ó‡¥ø‡¥∏‡µà‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "downy_mildew": "Spray metalaxyl + mancozeb; avoid overhead irrigation. / ‡¥Æ‡µÜ‡¥±‡µç‡¥±‡¥≤‡¥æ‡¥ï‡µç‡¥∏‡¥ø‡µΩ + ‡¥Æ‡¥æ‡¥ô‡µç‡¥ï‡µã‡¥∏‡µÜ‡¥¨‡µç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï; ‡¥Æ‡µá‡µΩ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®‡¥Ç ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "anthracnose": "Remove infected fruits; spray carbendazim. / ‡¥¨‡¥æ‡¥ß‡¥ø‡¥ö‡µç‡¥ö ‡¥™‡¥¥‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï; ‡¥ï‡¥æ‡µº‡¥¨‡µÜ‡µª‡¥°‡¥æ‡¥∏‡¥ø‡¥Ç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
}

# ---------------- WEATHER TIPS ----------------
tips = {
    "Monday": "Check soil moisture; plan irrigation if needed. / ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥≤‡µÜ ‡¥à‡µº‡¥™‡µç‡¥™‡¥Ç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï; ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
    "Tuesday": "Apply organic manure or compost for soil health. / ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø‡¥Ç ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥ú‡µà‡¥µ‡¥µ‡¥≥‡¥Ç ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï.",
    "Wednesday": "Inspect crops for pest/disease; early detection saves yield. / ‡¥µ‡¥ø‡¥≥‡¥Ø‡¥ø‡µΩ ‡¥ï‡µÄ‡¥ü‡¥∞‡µã‡¥ó‡¥ô‡µç‡¥ô‡µæ ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï; ‡¥®‡µá‡¥∞‡¥§‡µç‡¥§‡µÜ ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥æ‡µΩ ‡¥µ‡¥ø‡¥≥ ‡¥∞‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç.",
    "Thursday": "Mulch to conserve water, reduce weeds, and enrich soil. / ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥∏‡¥Ç‡¥∞‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª, ‡¥™‡µÅ‡¥≤‡µç‡¥≤‡µÅ‡¥ï‡µæ ‡¥ï‡µÅ‡¥±‡¥Ø‡µç‡¥ï‡µç‡¥ï‡¥æ‡µª, ‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥∏‡¥Æ‡µç‡¥™‡µÅ‡¥∑‡µç‡¥ü‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥Æ‡µÅ‡¥≤‡µç‚Äç‡¥ö‡µç‡¥ö‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
    "Friday": "Prune diseased branches; spray preventive fungicides. / ‡¥∞‡µã‡¥ó‡¥¨‡¥æ‡¥ß‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥ï‡µä‡¥Æ‡µç‡¥™‡µÅ‡¥ï‡µæ ‡¥µ‡µÜ‡¥ü‡µç‡¥ü‡¥ø ‡¥Æ‡¥æ‡¥±‡µç‡¥±‡µÅ‡¥ï; ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥∞‡µã‡¥ß ‡¥´‡¥Ç‡¥ó‡¥ø‡¥∏‡µà‡¥°‡µç ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Saturday": "Harvest mature crops; ensure safe storage facilities. / ‡¥µ‡¥ø‡¥≥‡¥µ‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§ ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ ‡¥∏‡µÅ‡¥∞‡¥ï‡µç‡¥∑‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥∏‡¥Ç‡¥≠‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Sunday": "Soil rest day; prepare crop rotation plan for next week. / ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç ‡¥µ‡¥ø‡¥∂‡µç‡¥∞‡¥Æ‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï; ‡¥Ö‡¥ü‡µÅ‡¥§‡µç‡¥§ ‡¥Ü‡¥¥‡µç‡¥ö‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥µ‡¥ø‡¥≥ ‡¥™‡¥∞‡¥ø‡¥µ‡µº‡¥§‡µç‡¥§‡¥® ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡¥±‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
}

# ---------------- PEST ALERTS ----------------
pest_alerts_data = [
    {"date": "2025-09-01", "pest": "Brown planthopper / ‡¥§‡¥µ‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥™‡µÅ‡¥¥‡µÅ", "region": "Alappuzha"},
    {"date": "2025-09-03", "pest": "Bacterial wilt / ‡¥¨‡¥æ‡¥ï‡µç‡¥ü‡µÄ‡¥∞‡¥ø‡¥Ø‡µΩ ‡¥µ‡¥æ‡¥ü‡µç‡¥ü‡µç", "region": "Kozhikode"},
    {"date": "2025-09-05", "pest": "Fall armyworm / ‡¥´‡¥æ‡µæ ‡¥Ü‡µº‡¥Æ‡¥ø‡¥µ‡µã‡¥Ç", "region": "Thrissur"},
    {"date": "2025-09-07", "pest": "Fruit fly / ‡¥™‡¥¥‡¥Ç ‡¥à‡¥ö‡µç‡¥ö", "region": "Palakkad"},
]

# ---------------- FERTILIZER RULES ----------------
fertilizer_recommendations = {
    "rice": {"seedling": {"N": 80, "P": 40, "K": 40},
             "vegetative": {"N": 100, "P": 50, "K": 50},
             "flowering": {"N": 60, "P": 40, "K": 60}},
    "banana": {"seedling": {"N": 150, "P": 50, "K": 200},
               "vegetative": {"N": 200, "P": 60, "K": 250},
               "flowering": {"N": 100, "P": 40, "K": 150}},
    "coconut": {"seedling": {"N": 100, "P": 40, "K": 100},
                "vegetative": {"N": 200, "P": 50, "K": 250},
                "flowering": {"N": 150, "P": 60, "K": 200}},
    "groundnut": {"seedling": {"N": 40, "P": 60, "K": 40},
                  "vegetative": {"N": 50, "P": 70, "K": 50},
                  "flowering": {"N": 60, "P": 80, "K": 60}}
}

# ---------------- MODELS ----------------
class FarmerInput(BaseModel):
    soil_type: str
    rainfall_mm: float
    season: str

class FertilizerInput(BaseModel):
    crop: str
    stage: str
    soil_npk: dict

# ---------------- ENDPOINTS ----------------
@app.post("/recommend_crop")
def recommend_crop(data: FarmerInput):
    soil = data.soil_type.lower()
    if soil in crops_data:
        crop = random.choice(crops_data[soil])
        return {"recommended_crop": crop}
    else:
        return {"error": "Soil type not found. / ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥§‡¥∞‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡¥®‡¥æ‡¥Ø‡¥ø‡¥≤‡µç‡¥≤."}

@app.get("/weather_tip")
def weather_tip():
    today = datetime.datetime.now().strftime("%A")
    return {"day": today, "tip": tips[today]}

@app.get("/disease_help/{disease_name}")
def disease_help(disease_name: str):
    disease = disease_name.lower()
    if disease in disease_data:
        return {"remedy": disease_data[disease]}
    else:
        return {"error": "Disease not found. / ‡¥∞‡µã‡¥ó‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡¥®‡¥æ‡¥Ø‡¥ø‡¥≤‡µç‡¥≤."}

@app.get("/pest_alerts")
def pest_alerts(region: str = "Kerala"):
    alerts = [a for a in pest_alerts_data if region.lower() in a["region"].lower()]
    return alerts if alerts else []

@app.post("/fertilizer_advice")
def fertilizer_advice(data: FertilizerInput):
    crop = data.crop.lower()
    stage = data.stage.lower()
    soil_npk = data.soil_npk

    if crop in fertilizer_recommendations and stage in fertilizer_recommendations[crop]:
        rec = fertilizer_recommendations[crop][stage]
        note = ""
        if soil_npk.get("N", 0) > 200:
            note = "Reduce Nitrogen; soil already high in N. / ‡¥®‡µà‡¥ü‡µç‡¥∞‡¥ú‡µª ‡¥ï‡µÅ‡¥±‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥ï; ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡µΩ ‡¥á‡¥§‡¥ø‡¥®‡¥ï‡¥Ç ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡¥≤‡µÅ‡¥£‡µç‡¥ü‡µç."
        return {
            "recommended_NPK_kg_per_acre": rec,
            "pesticide_note": note
        }
    else:
        return {"error": "Crop/stage not found. / ‡¥µ‡¥ø‡¥≥/‡¥ò‡¥ü‡µç‡¥ü‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡¥®‡¥æ‡¥Ø‡¥ø‡¥≤‡µç‡¥≤."}
